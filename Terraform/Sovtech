provider "aws"  

{ 
profile = "default" 
 

region = "us-east-1" 
 

} 
 
 

 

# Create a VPC 

resource "aws_vpc" "my-vpc" { 

cidr_block = "10.0.0.0/16" 

tags = { 

Name = "Demo VPC" 

} 

} 

 

# Create Web Public Subnet 

resource "aws_subnet" "web-subnet-1" { 

vpc_id = aws_vpc.my-vpc.id 

cidr_block = "10.0.1.0/24" 

availability_zone = "us-east-1a" 

map_public_ip_on_launch = true 

 

tags = { 

Name = "Web-1a" 

} 

} 

 

resource "aws_subnet" "web-subnet-2" { 

vpc_id = aws_vpc.my-vpc.id 

cidr_block = "10.0.2.0/24" 

availability_zone = "us-east-1b" 

map_public_ip_on_launch = true 

 

tags = { 

Name = "Web-2b" 

} 

} 

 

# Create Application Private Subnet 

resource "aws_subnet" "application-subnet-1" { 

vpc_id = aws_vpc.my-vpc.id 

cidr_block = "10.0.11.0/24" 

availability_zone = "us-east-1a" 

map_public_ip_on_launch = false 

 

tags = { 

Name = "Application-1a" 

} 

} 

 

resource "aws_subnet" "application-subnet-2" { 

vpc_id = aws_vpc.my-vpc.id 

cidr_block = "10.0.12.0/24" 

availability_zone = "us-east-1b" 

map_public_ip_on_launch = false 

 

tags = { 

Name = "Application-2b" 

} 

} 

 

# Create Database Private Subnet 

resource "aws_subnet" "database-subnet-1" { 

vpc_id = aws_vpc.my-vpc.id 

cidr_block = "10.0.21.0/24" 

availability_zone = "us-east-1a" 

 

tags = { 

Name = "Database-1a" 

} 

} 

 

resource "aws_subnet" "database-subnet-2" { 

vpc_id = aws_vpc.my-vpc.id 

cidr_block = "10.0.22.0/24" 

availability_zone = "us-east-1b" 

 

tags = { 

Name = "Database-2b" 

} 

} 

   resource "aws_lambda_function" "UploadFilesToBucket" { 
... 
environment { 
variables = { 
"node" = var. UploadFilesToBucket _node 
} 
} 
... 
} 

 #Create web security group 

resource "aws_security_group" "web-sg" { 

name = "Web-SG" 

description = "Allow HTTP inbound traffic" 

vpc_id = aws_vpc.my-vpc.id 

 

ingress { 

description = "HTTP from VPC" 

from_port = 80 

to_port = 80 

protocol = "tcp" 

cidr_blocks = ["0.0.0.0/0"] 

} 

 

egress { 

from_port = 0 

to_port = 0 

protocol = "-1" 

cidr_blocks = ["0.0.0.0/0"] 

} 

 

tags = { 

Name = "Web-SG" 

} 

} 

 

# Create Web Server Security Group 

resource "aws_security_group" "webserver-sg" { 

name = "Webserver-SG" 

description = "Allow inbound traffic from ALB" 

vpc_id = aws_vpc.my-vpc.id 

 

ingress { 

description = "Allow traffic from web layer" 

from_port = 80 

to_port = 80 

protocol = "tcp" 

security_groups = [aws_security_group.web-sg.id] 

} 

 

egress { 

from_port = 0 

to_port = 0 

protocol = "-1" 

cidr_blocks = ["0.0.0.0/0"] 

} 

 

tags = { 

Name = "Webserver-SG" 

} 

} 

 

# Create Database Security Group 

resource "aws_security_group" "database-sg" { 

name = "Database-SG" 

description = "Allow inbound traffic from application layer" 

vpc_id = aws_vpc.my-vpc.id 

 

ingress { 

description = "Allow traffic from application layer" 

from_port = 3306 

to_port = 3306 

protocol = "tcp" 

security_groups = [aws_security_group.webserver-sg.id] 

} 

 

egress { 

from_port = 32768 

to_port = 65535 

protocol = "tcp" 

cidr_blocks = ["0.0.0.0/0"] 

} 

 

tags = { 

Name = "Database-SG" 

} 

} 

Resource “aws lb” “external elb” 

name = "External-LB" 

internal = false 

load_balancer_type = "application" 

security_groups = [aws_security_group.web-sg.id] 

subnets = [aws_subnet.web-subnet-1.id, aws_subnet.web-subnet-2.id] 

} 

 

resource "aws_lb_target_group" "external-elb" { 

name = "ALB-TG" 

port = 80 

protocol = "HTTP" 

vpc_id = aws_vpc.my-vpc.id 

} 

 

resource "aws_lb_target_group_attachment" "external-elb1" { 

target_group_arn = aws_lb_target_group.external-elb.arn 

target_id = aws_instance.webserver1.id 

port = 80 

 

depends_on = [ 

aws_instance.webserver1, 

] 

} 

 

resource "aws_lb_target_group_attachment" "external-elb2" { 

target_group_arn = aws_lb_target_group.external-elb.arn 

target_id = aws_instance.webserver2.id 

port = 80 

 

depends_on = [ 

aws_instance.webserver2, 

] 

} 

 

resource "aws_lb_listener" "external-elb" { 

load_balancer_arn = aws_lb.external-elb.arn 

port = "80" 

protocol = "HTTP" 

 

default_action { 

type = "forward" 

target_group_arn = aws_lb_target_group.external-elb.arn 

} 

} 

